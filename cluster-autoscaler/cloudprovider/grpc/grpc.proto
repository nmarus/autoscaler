syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.k8s.cluster.autoscaler.cloudprovider.grpc";
option java_outer_classname = "CloudProviderGrpc";

package grpccloudprovider;

import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "k8s.io/api/core/v1/generated.proto";
//import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
//import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// CloudProvider service
/////////////////////////////////////////////////////////////////////////////////////////////////////////
service CloudProviderService {
    rpc Connect(ConnectRequest) returns (ConnectReply) {}
    rpc Name (CloudProviderServiceRequest) returns (NameReply) {}
    rpc NodeGroups (CloudProviderServiceRequest) returns (NodeGroupsReply) {}
    rpc NodeGroupForNode (NodeGroupForNodeRequest) returns (NodeGroupForNodeReply) {}
    rpc Pricing (CloudProviderServiceRequest) returns (PricingModelReply) {}
    rpc GetAvailableMachineTypes (CloudProviderServiceRequest) returns (AvailableMachineTypesReply) {}
    rpc NewNodeGroup (NewNodeGroupRequest) returns (NewNodeGroupReply) {}
    rpc GetResourceLimiter (CloudProviderServiceRequest) returns (ResourceLimiterReply) {}
    rpc GPULabel (CloudProviderServiceRequest) returns (GPULabelReply) {}
    rpc GetAvailableGPUTypes (CloudProviderServiceRequest) returns (GetAvailableGPUTypesReply) {}
    rpc Cleanup (CloudProviderServiceRequest) returns (CleanupReply) {}
    rpc Refresh (CloudProviderServiceRequest) returns (RefreshReply) {}
}

message CloudProviderServiceRequest {
    string providerID = 1;
}

message KubeAdmConfig {
    string kubeAdmAddress = 1;
    string kubeAdmToken = 2;
    string kubeAdmCACert = 3;
    repeated string kubeAdmExtraArguments = 4;
}

message NodeGroupDef {
    string nodeGroupID = 1;
    int32 minSize = 2;
    int32 maxSize = 3;
    bool provisionned = 4;
    bool includeExistingNode = 5;
    map<string, string> labels = 6;
}

message ConnectRequest {
    string providerID = 1;
    ResourceLimiter resourceLimiter = 2;
    KubeAdmConfig kubeAdmConfiguration = 3;
    repeated NodeGroupDef nodes = 4;
    bool autoProvisionned = 5;
}

message ConnectReply {
    oneof response {
        Error error = 1;
        bool connected = 2;
    }
}

message NameReply {
    string name = 1;
}

message NodeGroupsReply {
    repeated NodeGroup nodeGroups = 1;
}
  
message NodeGroupForNodeRequest {
    string providerID = 1;
    string node = 2;
}

message NodeGroupes {
    repeated NodeGroup items = 1;
}

message NodeGroupForNodeReply {
    oneof response {
        Error error = 1;
        NodeGroup nodeGroup = 2;
    }
}

message PricingModelReply {
    oneof response {
        Error error = 1;
        PricingModel priceModel = 2;
    }
}

message AvailableMachineTypes {
    repeated string machineType = 1;
}

message AvailableMachineTypesReply {
    oneof response {
        Error error = 1;
        AvailableMachineTypes availableMachineTypes = 2;
    }
}

message NewNodeGroupRequest {
    string providerID = 1;
    string machineType = 2;
    string nodeGroupID = 3;
    int32 minNodeSize = 4;
    int32 maxNodeSize = 5;
    map<string, string> labels = 6;
    map<string, string> systemLabels = 7;
    repeated k8s.io.api.core.v1.Taint taints = 8;
    map<string, string> extraResources = 9;
}

message NewNodeGroupReply {
    oneof response {
        Error error = 1;
        NodeGroup nodeGroup = 2;
    }
}

message ResourceLimiterReply {
    oneof response {
        Error error = 1;
        ResourceLimiter resourceLimiter = 2;
    }
}

message GPULabelReply {
    oneof response {
        Error error = 1;
        string gpulabel = 2;
    }
}

message GetAvailableGPUTypesReply {
    map<string, string> availableGpuTypes = 2;
}

message CleanupReply {
    Error error = 1;
}

message RefreshReply {
    Error error = 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// NodeGroup service
/////////////////////////////////////////////////////////////////////////////////////////////////////////
service NodeGroupService {
    rpc MaxSize (NodeGroupServiceRequest) returns (MaxSizeReply) {}
    rpc MinSize (NodeGroupServiceRequest) returns (MinSizeReply) {}
    rpc TargetSize (NodeGroupServiceRequest) returns (TargetSizeReply) {}
    rpc IncreaseSize (IncreaseSizeRequest) returns (IncreaseSizeReply) {}
    rpc DeleteNodes (DeleteNodesRequest) returns (DeleteNodesReply) {}
    rpc DecreaseTargetSize (DecreaseTargetSizeRequest) returns (DecreaseTargetSizeReply) {}
    rpc Id (NodeGroupServiceRequest) returns (IdReply) {}
    rpc Debug (NodeGroupServiceRequest) returns (DebugReply) {}
    rpc Nodes (NodeGroupServiceRequest) returns (NodesReply) {}
    rpc TemplateNodeInfo (NodeGroupServiceRequest) returns (TemplateNodeInfoReply) {}
    rpc Exist (NodeGroupServiceRequest) returns (ExistReply) {}
    rpc Create (NodeGroupServiceRequest) returns (CreateReply) {}
    rpc Delete (NodeGroupServiceRequest) returns (DeleteReply) {}
    rpc Autoprovisioned (NodeGroupServiceRequest) returns (AutoprovisionedReply) {}
    rpc Belongs (BelongsRequest) returns (BelongsReply) {}
}

message BelongsRequest {
    string providerID = 1;
    string nodeGroupID = 2;
    string node = 3;
}

message BelongsReply {
    oneof response {
        Error error = 1;
        bool belongs = 2;
    }
}

message NodeGroupServiceRequest {
    string providerID = 1;
    string nodeGroupID = 2;
}

message MaxSizeReply {
    int32 maxSize = 1;
}

message MinSizeReply {
    int32 minSize = 1;
}

message TargetSizeReply {
    oneof response {
        Error error = 1;
        int32 targetSize = 2;
    }
}

message IncreaseSizeRequest {
    string providerID = 1;
    string nodeGroupID = 2;
    int32 delta = 3;
}

message IncreaseSizeReply {
    Error error = 1;
}

message DeleteNodesRequest {
    string providerID = 1;
    string nodeGroupID = 2;
    repeated string node = 3;
}

message DeleteNodesReply {
    Error error = 1;
}

message DecreaseTargetSizeRequest {
    string providerID = 1;
    string nodeGroupID = 2;
    int32 delta = 3;
}

message DecreaseTargetSizeReply {
    Error error = 1;
}

message IdReply {
    string response = 1;
}

message DebugReply {
    string response = 1;
}

message Instances {
    repeated Instance items = 1;
}

message NodesReply {
    oneof response {
        Error error = 1;
        Instances instances = 2;
    }
}

message ImageStateSummary {
    int64 size = 1;
    int32 numNodes = 2;
}

message Resource {
	int64 milliCPU = 1;
	int64 memory = 2;
	int64 ephemeralStorage = 3;
	// We store allowedPodNumber (which is Node.Status.Allocatable.Pods().Value())
	// explicitly as int, to avoid conversions and improve performance.
	int32 allowedPodNumber = 4;
	// ScalarResources
	map<string,int64> scalarResources = 5;
}

message TransientSchedulerInfo {
    int32 allocatableVolumesCount = 1;
    int32 requestedVolumes = 2;
}

message ProtocolPort {
    string protocol = 1;
    int32 port = 2;
}

message HostPortInfo {
    map<string,ProtocolPort> hostPortInfo = 1;
}

message NodeInfo {
    string node = 1;
    repeated string pods = 2;
	HostPortInfo usedPorts  = 3;
    Resource requestedResource = 4;
    Resource nonzeroRequest = 5;
    map<string,ImageStateSummary> imageStates = 6;
    TransientSchedulerInfo TransientInfo = 7;
    int64 generation = 8;
}

message TemplateNodeInfoReply {
    oneof response {
        Error error = 1;
        NodeInfo nodeInfo = 2;
    }
}

message ExistReply {
    bool exists = 1;
}

message CreateReply {
    oneof response {
        Error error = 1;
        NodeGroup nodeGroup = 2;  
    }
}

message DeleteReply {
    Error error = 1;
}

message AutoprovisionedReply {
    bool autoprovisioned = 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// PricingModel service
/////////////////////////////////////////////////////////////////////////////////////////////////////////
service PricingModelService {
    rpc NodePrice (NodePriceRequest) returns (NodePriceReply) {}
    rpc PodPrice (PodPriceRequest) returns (PodPriceReply) {}
}

message NodePriceRequest {
    string providerID = 1;
    string node = 2;
    int64 startTime = 3;
    int64 endTime = 4;
}

message NodePriceReply {
    oneof response {
        Error error = 1;
        double price = 2;
    }
}

message PodPriceRequest {
    string providerID = 1;
    string pod = 2;
    int64 startTime = 3;
    int64 endTime = 4;
}

message PodPriceReply {
    oneof response {
        Error error = 1;
        double price = 2;
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// General messages types
/////////////////////////////////////////////////////////////////////////////////////////////////////////
message Error {
    string code = 1;
    string reason = 2;
}
  
message NodeGroup {
    string id = 1;
}

message PricingModel {
    string id = 1;
}

message ResourceLimiter {
    map<string,int64> minLimits = 1;
    map<string,int64> maxLimits = 2;
}

enum InstanceErrorClass {
    ERROR_UNDEFINED = 0;
    ERROR_OUT_OF_RESOURCES = 1;
    ERROR_OTHER = 99;
}

message InstanceErrorInfo {
	InstanceErrorClass errorClass = 1;
	// ErrorCode is cloud-provider specific error code for error condition
	string errorCode = 2;
	// ErrorMessage is human readable description of error condition
	string errorMessage = 3;
}

enum InstanceState {
    STATE_UNDEFINED = 0;
    STATE_RUNNING = 1;
    STATE_BEING_CREATED = 2;
    STATE_BEING_DELETED = 3; 
}

message InstanceStatus {
    InstanceState state = 1;
    InstanceErrorInfo  errorInfo = 2;
}

message Instance {
    string id = 1;
    InstanceStatus status = 2;
}